delimiter //

DROP PROCEDURE IF EXISTS orihime.TextTree; //

CREATE PROCEDURE orihime.TextTree(IN user_name VARCHAR(256), IN text_hash CHAR(32))
BEGIN

WITH RECURSIVE TextTreeNode(TextID, WordID, DefinitionID, SourceID) AS (
     SELECT 0 AS TextID, 0 AS WordID, text.id AS DefinitionID, text.source AS SourceID
     FROM text WHERE text.hash = unhex(text_hash)

     UNION ALL

     SELECT Relation.text, Relation.word, Definition.id, Source.id
     FROM TextTreeNode
     INNER JOIN user AS User ON User.name = user_name
     INNER JOIN word_relation AS Relation ON Relation.text = TextTreeNode.DefinitionID AND Relation.user = User.id
     INNER JOIN word AS Word ON Word.id = Relation.word
     INNER JOIN text AS Definition ON Definition.id = Word.definition
     INNER JOIN source AS Source ON Source.id = Definition.source
     )

     -- Should I do the JOINs below in the CTE?
     SELECT
        "00000000000000000000000000000000" AS hash,
        lower(hex(Text.hash)) AS id,
        NULL AS word,
        Text.contents AS definition,
        Source.name AS source
     FROM TextTreeNode
     INNER JOIN text AS Text ON Text.id = TextTreeNode.DefinitionID 
     INNER JOIN source AS Source ON TextTreeNode.SourceID = Source.id
     WHERE TextTreeNode.TextID = 0

     UNION ALL

     SELECT
        lower(hex(Parent.hash)) AS hash,
        lower(hex(Definition.hash)) AS id,
        word.word AS word,
        Definition.contents AS definition,
        source.name AS source
     FROM TextTreeNode
     INNER JOIN text AS Parent ON Parent.id = TextTreeNode.TextID
     INNER JOIN text AS Definition ON Definition.id = TextTreeNode.DefinitionID 
     INNER JOIN word ON TextTreeNode.WordID = word.id
     INNER JOIN source on TextTreeNode.SourceID = source.id;

END; //

delimiter ;
